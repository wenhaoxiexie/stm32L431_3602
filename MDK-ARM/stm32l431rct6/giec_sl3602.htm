<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\stm32l431rct6\giec_sl3602.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\stm32l431rct6\giec_sl3602.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Thu Nov 28 08:55:41 2019
<BR><P>
<H3>Maximum Stack Usage =       8864 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; sleep_mode &rArr; wifi_upload_all_info &rArr; wifi_server_time_syn &rArr; wifi_parase_time &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32l4xx_it.o(i.BusFault_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3b]">COMP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[49]">CRS_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[36]">DMA2_Channel1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[37]">DMA2_Channel2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[38]">DMA2_Channel3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[39]">DMA2_Channel4_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3a]">DMA2_Channel5_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel6_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel7_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32l4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[30]">EXTI15_10_IRQHandler</a> from stm32l4xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from stm32l4xx_it.o(i.EXTI2_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from stm32l4xx_it.o(i.EXTI3_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from stm32l4xx_it.o(i.EXTI4_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from stm32l4xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[48]">FPU_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32l4xx_it.o(i.HardFault_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[28]">I2C1_ER_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[27]">I2C1_EV_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2a]">I2C2_ER_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[29]">I2C2_EV_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[43]">I2C3_ER_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[42]">I2C3_EV_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3c]">LPTIM1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3d]">LPTIM2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[40]">LPUART1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32l4xx_it.o(i.MemManage_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32l4xx_it.o(i.NMI_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[b]">PVD_PVM_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32l4xx_it.o(i.PendSV_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[41]">QUADSPI_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[47]">RNG_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[31]">RTC_Alarm_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[44]">SAI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[32]">SDMMC1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2b]">SPI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2c]">SPI2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[33]">SPI3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32l4xx_it.o(i.SVC_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[45]">SWPMI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32l4xx_it.o(i.SysTick_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4b]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from startup_stm32l431xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32l4xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[34]">TIM6_DAC_IRQHandler</a> from stm32l4xx_it.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[35]">TIM7_IRQHandler</a> from stm32l4xx_it.o(i.TIM7_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[46]">TSC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4d]">UART_DMAAbortOnError</a> from stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[4f]">UART_RxISR_16BIT</a> from stm32l4xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
 <LI><a href="#[4e]">UART_RxISR_8BIT</a> from stm32l4xx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
 <LI><a href="#[2d]">USART1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2e]">USART2_IRQHandler</a> from stm32l4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2f]">USART3_IRQHandler</a> from stm32l4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32l4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l431xx.o(.text)
 <LI><a href="#[51]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[50]">fputc</a> from usart.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[4a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(.text)
</UL>
<P><STRONG><a name="[225]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[52]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[226]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[227]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[228]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[229]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[22a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Exchange
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_operate_sucessful
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_CheckATQBEx
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Anticollision
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_ActivateCard
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Command_Int_Set
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Command_Int
</UL>

<P><STRONG><a name="[20e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_server_time_syn
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_parase_time
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan_countdown
</UL>

<P><STRONG><a name="[22b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_delete
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_del
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_password_menu
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_fp_menu
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_card_menu
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
</UL>

<P><STRONG><a name="[22c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_all_info
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_ApplyProtocolSettings
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_all_info
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_alarm_info
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_sleep
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_server_time_syn
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_add
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan_countdown
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
</UL>

<P><STRONG><a name="[22e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[220]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_all_info
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_user_info
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
</UL>

<P><STRONG><a name="[217]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_all_info
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_password
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_recv_parse
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_smart_config
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_search_item
</UL>

<P><STRONG><a name="[19a]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_all_info
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_send
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_recv_parse
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_point_parse
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_server_time_syn
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_search_item
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan_countdown
</UL>

<P><STRONG><a name="[18d]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_all_info
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_parase_time
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan_countdown
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_host_info
</UL>

<P><STRONG><a name="[5a]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_user_info
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[5c]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_all_info
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_battery_get
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_battery_get
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_battery_get
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_battery_get
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[22f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[230]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[231]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[232]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[233]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[61]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[53]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[234]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[6a]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[6c]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[6d]"></a>ADC_ConversionStop</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, stm32l4xx_hal_adc.o(i.ADC_ConversionStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_ConversionStop
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
</UL>

<P><STRONG><a name="[71]"></a>ADC_Disable</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32l4xx_hal_adc.o(i.ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
</UL>

<P><STRONG><a name="[72]"></a>ADC_Enable</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32l4xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[73]"></a>APT_ChipRegInit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, apt8l16.o(i.APT_ChipRegInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = APT_ChipRegInit &rArr; APT_WriteChipReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_WriteChipReg
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_ChipRegSet
</UL>

<P><STRONG><a name="[75]"></a>APT_ChipRegSet</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, apt8l16.o(i.APT_ChipRegSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = APT_ChipRegSet &rArr; APT_ChipRegInit &rArr; APT_WriteChipReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_WriteChipReg
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_ChipRegInit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_Init
</UL>

<P><STRONG><a name="[77]"></a>APT_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, apt8l16.o(i.APT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = APT_Init &rArr; APT_ChipRegSet &rArr; APT_ChipRegInit &rArr; APT_WriteChipReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_ChipRegSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_mode_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
</UL>

<P><STRONG><a name="[78]"></a>APT_KeyEnableSel</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, apt8l16.o(i.APT_KeyEnableSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = APT_KeyEnableSel &rArr; APT_WriteChipReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_WriteChipReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu_sub
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_reset
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;card_login
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_add
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_add
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_password_menu
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_menu_sub
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_hak_menu_sub
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_fp_menu
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_card_menu
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_keyboard_menu
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_hak_menu_sub
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_factory_menu
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_date_menu
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan_countdown
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_resource_used_log
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_operator_log
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_host_about_log
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_battery_used_log
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_menu
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_menu
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_menu
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_set
</UL>

<P><STRONG><a name="[79]"></a>APT_ReadChipReg</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, apt8l16.o(i.APT_ReadChipReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = APT_ReadChipReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_ScanTouchKey
</UL>

<P><STRONG><a name="[7b]"></a>APT_ScanTouchKey</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, apt8l16.o(i.APT_ScanTouchKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = APT_ScanTouchKey &rArr; APT_ReadChipReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_ReadChipReg
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[7f]"></a>APT_WORK_125HZ_VAL</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, apt8l16.o(i.APT_WORK_125HZ_VAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = APT_WORK_125HZ_VAL &rArr; APT_WriteChipReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_WriteChipReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
</UL>

<P><STRONG><a name="[74]"></a>APT_WriteChipReg</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, apt8l16.o(i.APT_WriteChipReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = APT_WriteChipReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_WORK_125HZ_VAL
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_ChipRegSet
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_ChipRegInit
</UL>

<P><STRONG><a name="[81]"></a>All_Screen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssd1305.o(i.All_Screen))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_smart_config
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_password_menu
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_fp_menu
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_card_menu
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_operator_log
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>Clear_Screen</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ssd1305.o(i.Clear_Screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Clear_Screen &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ic
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; detect_card &rArr; phpalI14443p3a_ActivateCard &rArr; phpalI14443p3a_Sw_ActivateCard &rArr; phpalI14443p3a_Sw_Select &rArr; phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc663_Exchange &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; detect_card &rArr; phpalI14443p3a_ActivateCard &rArr; phpalI14443p3a_Sw_ActivateCard &rArr; phpalI14443p3a_Sw_Select &rArr; phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc663_Exchange &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; detect_card &rArr; phpalI14443p3a_ActivateCard &rArr; phpalI14443p3a_Sw_ActivateCard &rArr; phpalI14443p3a_Sw_Select &rArr; phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc663_Exchange &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; detect_card &rArr; phpalI14443p3a_ActivateCard &rArr; phpalI14443p3a_Sw_ActivateCard &rArr; phpalI14443p3a_Sw_Select &rArr; phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc663_Exchange &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; detect_card &rArr; phpalI14443p3a_ActivateCard &rArr; phpalI14443p3a_Sw_ActivateCard &rArr; phpalI14443p3a_Sw_Select &rArr; phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc663_Exchange &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>FLASH_FlushCaches</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[95]"></a>FLASH_PageErase</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[87]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32l4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[88]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 958 bytes, Stack size 40 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffsetState
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSamplingTime
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetOffsetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[206]"></a>HAL_ADC_GetState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_battery_get
</UL>

<P><STRONG><a name="[207]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_battery_get
</UL>

<P><STRONG><a name="[8c]"></a>HAL_ADC_Init</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[8d]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
</UL>

<P><STRONG><a name="[8f]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsTriggerSourceSWStart
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_battery_get
</UL>

<P><STRONG><a name="[91]"></a>HAL_ADC_Start</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_battery_get
</UL>

<P><STRONG><a name="[92]"></a>HAL_ADC_Stop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_Stop &rArr; ADC_ConversionStop
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
</UL>

<P><STRONG><a name="[e7]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, stm32l4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase
</UL>

<P><STRONG><a name="[205]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase
</UL>

<P><STRONG><a name="[97]"></a>HAL_FLASH_Program</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Fast
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
</UL>

<P><STRONG><a name="[203]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase
</UL>

<P><STRONG><a name="[ae]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 258 bytes, Stack size 36 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[9a]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, main.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; detect_card &rArr; phpalI14443p3a_ActivateCard &rArr; phpalI14443p3a_Sw_ActivateCard &rArr; phpalI14443p3a_Sw_Select &rArr; phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc663_Exchange &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_alarm_info
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_on
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_power_on
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_reset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_card
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_ScanTouchKey
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; detect_card &rArr; phpalI14443p3a_ActivateCard &rArr; phpalI14443p3a_Sw_ActivateCard &rArr; phpalI14443p3a_Sw_Select &rArr; phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc663_Exchange &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>HAL_GPIO_Init</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_power_on
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_power_off
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartConfig_STOP
</UL>

<P><STRONG><a name="[9d]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_all_info
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[7d]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_on
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_power_on
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UNLOCK
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOCK
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_ScanTouchKey
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwSetReg
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwGetReg
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_power_off
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_off
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_powerOn
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_powerOff
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_RC663_device
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;horn_powerOn
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;horn_powerOff
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_powerOn
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_powerOff
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IC
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SSP0_SetReg
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SSP0_GetReg
</UL>

<P><STRONG><a name="[70]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[f9]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[fa]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[fb]"></a>HAL_I2CEx_EnableFastModePlus</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_hal_i2c_ex.o(i.HAL_I2CEx_EnableFastModePlus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2CEx_EnableFastModePlus
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[a4]"></a>HAL_I2C_Init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[a6]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Master_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>

<P><STRONG><a name="[7a]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_ReadChipReg
</UL>

<P><STRONG><a name="[80]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_WriteChipReg
</UL>

<P><STRONG><a name="[ad]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
</UL>

<P><STRONG><a name="[a5]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
</UL>

<P><STRONG><a name="[af]"></a>HAL_IWDG_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32l4xx_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
</UL>

<P><STRONG><a name="[e2]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_iwdg.o(i.HAL_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[11d]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b0]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>HAL_InitTick</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b3]"></a>HAL_MspInit</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[9f]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_power_on
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_card
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;card_login
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[a2]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_mode_init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_sleep
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_power_on
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_reset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_card
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;card_login
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartConfig_STOP
</UL>

<P><STRONG><a name="[b5]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_power_on
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartConfig_STOP
</UL>

<P><STRONG><a name="[b1]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[120]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[202]"></a>HAL_PWREx_EnterSTOP2Mode</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_EnterSTOP2Mode))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
</UL>

<P><STRONG><a name="[107]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[11f]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[123]"></a>HAL_RCCEx_EnableMSIPLLMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_EnableMSIPLLMode))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b7]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 682 bytes, Stack size 40 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b9]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[114]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
</UL>

<P><STRONG><a name="[121]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[113]"></a>HAL_RCC_GetOscConfig</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetOscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetOscConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
</UL>

<P><STRONG><a name="[127]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[128]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[ba]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[bb]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1202 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[bd]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_Set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_alarm_info
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;card_login
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_delete
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_add
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_save
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_del
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_delete
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_add
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_date_menu
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_status_upload
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_tryErr_info
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_confirm
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_lock
</UL>

<P><STRONG><a name="[bf]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_Set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_alarm_info
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;card_login
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_delete
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_add
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_save
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_del
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_delete
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_add
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_date_menu
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_status_upload
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_tryErr_info
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_confirm
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_lock
</UL>

<P><STRONG><a name="[c0]"></a>HAL_RTC_Init</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[c1]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[c4]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_Set
</UL>

<P><STRONG><a name="[c6]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_parase_time
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_date_menu
</UL>

<P><STRONG><a name="[c7]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_parase_time
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_date_menu
</UL>

<P><STRONG><a name="[c3]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[c8]"></a>HAL_SPI_Init</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[ca]"></a>HAL_SPI_MspDeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, spi.o(i.HAL_SPI_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_SPI_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
</UL>

<P><STRONG><a name="[c9]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
</UL>

<P><STRONG><a name="[cb]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 610 bytes, Stack size 40 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWriteByte
</UL>

<P><STRONG><a name="[122]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ce]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[cd]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[dd]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[cf]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[d0]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[125]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2_Start
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
</UL>

<P><STRONG><a name="[e1]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[d2]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[d8]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; display_factory_hjs_number &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; display_factory_hjs_number &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_factory_hjs_number
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UNLOCK
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOCK
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[129]"></a>HAL_UART_GetState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[f0]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usart.o(i.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
</UL>

<P><STRONG><a name="[ec]"></a>HAL_UART_MspInit</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[12a]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 164 bytes, Stack size 12 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_on
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_power_on
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
</UL>

<P><STRONG><a name="[126]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, main.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[f1]"></a>HAL_UART_Transmit</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_reset
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_usart2_send
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_trans_recev_command
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_smart_config
</UL>

<P><STRONG><a name="[ea]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>LOCK</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hsj08.o(i.LOCK))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LOCK &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_mode_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[f5]"></a>MX_ADC1_Init</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, adc.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>MX_GPIO_Init</STRONG> (Thumb, 460 bytes, Stack size 64 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>MX_I2C1_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, i2c.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_EnableFastModePlus
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>MX_I2C3_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, i2c.o(i.MX_I2C3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_I2C3_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_EnableFastModePlus
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>MX_IWDG_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, iwdg.o(i.MX_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_IWDG_Init &rArr; HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe]"></a>MX_RTC_Init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, rtc.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_reset
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>MX_SPI2_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, spi.o(i.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>MX_TIM2_Init</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, tim.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>MX_TIM6_Init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tim.o(i.MX_TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_TIM6_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>MX_TIM7_Init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tim.o(i.MX_TIM7_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_TIM7_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_power_on
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartConfig_STOP
</UL>

<P><STRONG><a name="[106]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartConfig_STOP
</UL>

<P><STRONG><a name="[1af]"></a>MakePackageHead</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fpcst90x.o(i.MakePackageHead))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_usart2_send
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>RTC_Alarm_Set</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, rtc.o(i.RTC_Alarm_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTC_Alarm_Set &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
</UL>

<P><STRONG><a name="[be]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[c5]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
</UL>

<P><STRONG><a name="[c2]"></a>RTC_EnterInitMode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[109]"></a>RegCtl_SpiHwGetReg</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, regctl_spihw.o(i.RegCtl_SpiHwGetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SSP0_GetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_Stub_Exchange
</UL>

<P><STRONG><a name="[1d6]"></a>RegCtl_SpiHwInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, regctl_spihw.o(i.RegCtl_SpiHwInit))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_Stub_Init
</UL>

<P><STRONG><a name="[10b]"></a>RegCtl_SpiHwSetReg</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, regctl_spihw.o(i.RegCtl_SpiHwSetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RegCtl_SpiHwSetReg &rArr; _SSP0_SetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SSP0_SetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_Stub_Exchange
</UL>

<P><STRONG><a name="[10d]"></a>Reset_IC</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ssd1305.o(i.Reset_IC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Reset_IC &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_mode_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
</UL>

<P><STRONG><a name="[10e]"></a>Reset_RC663_device</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, regctl_spihw.o(i.Reset_RC663_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Reset_RC663_device &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc9883_init
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>SYSCLKConfig_STOP</STRONG> (Thumb, 536 bytes, Stack size 216 bytes, menu.o(i.SYSCLKConfig_STOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = SYSCLKConfig_STOP &rArr; APT_Init &rArr; APT_ChipRegSet &rArr; APT_ChipRegInit &rArr; APT_WriteChipReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetOscConfig
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_powerOn
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartConfig_STOP
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;horn_powerOn
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_powerOn
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ic
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IC
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>SystemClock_Config</STRONG> (Thumb, 180 bytes, Stack size 200 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableMSIPLLMode
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; display_factory_hjs_number &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; display_factory_hjs_number &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM7_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TIM7_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; display_factory_hjs_number &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[d3]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[124]"></a>Tim2_Start</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tim.o(i.Tim2_Start))
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;card_login
</UL>

<P><STRONG><a name="[ee]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ef]"></a>UART_CheckIdleState</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ed]"></a>UART_SetConfig</STRONG> (Thumb, 554 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f2]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[e4]"></a>UNLOCK</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hsj08.o(i.UNLOCK))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UNLOCK &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;card_login
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[2e]"></a>USART2_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART3_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>Write_Command</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ssd1305.o(i.Write_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Write_Command &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram_with_multi_arg
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram_with_arg
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ic
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_update
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Screen
</UL>

<P><STRONG><a name="[85]"></a>Write_Data</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ssd1305.o(i.Write_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram_with_multi_arg
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram_with_arg
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_update
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Screen
</UL>

<P><STRONG><a name="[f6]"></a>_Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_Set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[10a]"></a>_SSP0_GetReg</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, regctl_spihw.o(i._SSP0_GetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwGetReg
</UL>

<P><STRONG><a name="[10c]"></a>_SSP0_SetReg</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, regctl_spihw.o(i._SSP0_SetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _SSP0_SetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwSetReg
</UL>

<P><STRONG><a name="[12b]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[235]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[7e]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_all_info
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_mode_init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_power_on
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_factory_hjs_number
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_card
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;card_login
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_ScanTouchKey
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_user_info
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_send
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_recv_parse
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_server_time_syn
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_usart2_send
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_trans_recev_command
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_smart_config
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_parase_time
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_search_item
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_delete
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_add
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_save
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_del
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_delete
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_add
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_password_menu
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_fp_menu
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_card_menu
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_keyboard_menu
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_date_menu
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan_countdown
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_operator_log
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_tryErr_info
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_confirm
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_lock
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_WriteChipReg
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc9883_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_host_info
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_spe_char_del
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_finger_const
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_card
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_keyboard_count
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_WaitIrq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWriteByte
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Command_Int_Set
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Command_Int
</UL>

<P><STRONG><a name="[12d]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[236]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[137]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_alarm_info
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;card_login
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_user_info
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_send
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_server_time_syn
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_delete
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_add
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_save
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_del
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_delete
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_add
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan_countdown
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_status_upload
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_tryErr_info
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_confirm
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[237]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[238]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[239]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[23a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[13b]"></a>caculator_hex_sum</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, fpcst90x.o(i.caculator_hex_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = caculator_hex_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_usart2_send
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkout_sum_tool
</UL>

<P><STRONG><a name="[130]"></a>card_login</STRONG> (Thumb, 720 bytes, Stack size 88 bytes, menu.o(i.card_login))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = card_login &rArr; APT_KeyEnableSel &rArr; APT_WriteChipReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_on
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UNLOCK
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2_Start
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_battery
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_log_record
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_battery_get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_confirm
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_card_non_exit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_battery_warn
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>checkout_sum_tool</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fpcst90x.o(i.checkout_sum_tool))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = checkout_sum_tool &rArr; caculator_hex_sum
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;caculator_hex_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_pakge_recv_parse
</UL>

<P><STRONG><a name="[9c]"></a>detect_card</STRONG> (Thumb, 458 bytes, Stack size 40 bytes, nfc9883.o(i.detect_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = detect_card &rArr; phpalI14443p3a_ActivateCard &rArr; phpalI14443p3a_Sw_ActivateCard &rArr; phpalI14443p3a_Sw_Select &rArr; phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc663_Exchange &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_RequestB
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_ActivateCard
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Cmd_Lpcd_Set
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Cmd_LpcdConfig
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ApplyProtocolSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[144]"></a>display_battery_update</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ssd1305.o(i.display_battery_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = display_battery_update &rArr; display_one_word
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu
</UL>

<P><STRONG><a name="[138]"></a>display_battery_warn</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ssd1305.o(i.display_battery_warn))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_battery_warn &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;card_login
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_confirm
</UL>

<P><STRONG><a name="[147]"></a>display_card_exit</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ssd1305.o(i.display_card_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_card_exit &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu_sub
</UL>

<P><STRONG><a name="[148]"></a>display_card_full</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ssd1305.o(i.display_card_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_card_full &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu_sub
</UL>

<P><STRONG><a name="[139]"></a>display_card_non_exit</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ssd1305.o(i.display_card_non_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_card_non_exit &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;card_login
</UL>

<P><STRONG><a name="[149]"></a>display_card_null</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ssd1305.o(i.display_card_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_card_null &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_card_menu
</UL>

<P><STRONG><a name="[14a]"></a>display_card_rigister</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ssd1305.o(i.display_card_rigister))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_card_rigister &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_add
</UL>

<P><STRONG><a name="[14b]"></a>display_check_failed</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssd1305.o(i.display_check_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_check_failed &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_keyboard_menu
</UL>

<P><STRONG><a name="[14c]"></a>display_check_sucessful</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, ssd1305.o(i.display_check_sucessful))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = display_check_sucessful &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_add
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_save
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_add
</UL>

<P><STRONG><a name="[14d]"></a>display_company_name</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ssd1305.o(i.display_company_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = display_company_name
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu
</UL>

<P><STRONG><a name="[132]"></a>display_confirm</STRONG> (Thumb, 534 bytes, Stack size 56 bytes, ssd1305.o(i.display_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = display_confirm &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;card_login
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_confirm
</UL>

<P><STRONG><a name="[14e]"></a>display_date_set</STRONG> (Thumb, 488 bytes, Stack size 40 bytes, ssd1305.o(i.display_date_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = display_date_set &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_date_menu
</UL>

<P><STRONG><a name="[14f]"></a>display_date_update</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, ssd1305.o(i.display_date_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = display_date_update &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_date_menu
</UL>

<P><STRONG><a name="[150]"></a>display_date_ymd</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, ssd1305.o(i.display_date_ymd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = display_date_ymd &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu
</UL>

<P><STRONG><a name="[151]"></a>display_del_failed</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssd1305.o(i.display_del_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_del_failed &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_password_menu
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_card_menu
</UL>

<P><STRONG><a name="[152]"></a>display_del_sucessful</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssd1305.o(i.display_del_sucessful))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_del_sucessful &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_delete
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_password_menu
</UL>

<P><STRONG><a name="[153]"></a>display_factory_fail</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ssd1305.o(i.display_factory_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_factory_fail &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
</UL>

<P><STRONG><a name="[e3]"></a>display_factory_hjs_number</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ssd1305.o(i.display_factory_hjs_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = display_factory_hjs_number &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow_tool
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[155]"></a>display_factory_sel</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, ssd1305.o(i.display_factory_sel))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_factory_sel &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
</UL>

<P><STRONG><a name="[156]"></a>display_factory_success</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ssd1305.o(i.display_factory_success))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_factory_success &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
</UL>

<P><STRONG><a name="[157]"></a>display_finger_check_fail</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssd1305.o(i.display_finger_check_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_finger_check_fail &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
</UL>

<P><STRONG><a name="[158]"></a>display_finger_del_fail</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssd1305.o(i.display_finger_del_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_finger_del_fail &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_fp_menu
</UL>

<P><STRONG><a name="[159]"></a>display_finger_del_sucess</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssd1305.o(i.display_finger_del_sucess))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_finger_del_sucess &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_delete
</UL>

<P><STRONG><a name="[15a]"></a>display_finger_exit</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssd1305.o(i.display_finger_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_finger_exit &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu_sub
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_hak_menu_sub
</UL>

<P><STRONG><a name="[15b]"></a>display_finger_fail</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssd1305.o(i.display_finger_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_finger_fail &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu_sub
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_hak_menu_sub
</UL>

<P><STRONG><a name="[15c]"></a>display_finger_full</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssd1305.o(i.display_finger_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_finger_full &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu_sub
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_hak_menu_sub
</UL>

<P><STRONG><a name="[15d]"></a>display_finger_null</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssd1305.o(i.display_finger_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_finger_null &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_fp_menu
</UL>

<P><STRONG><a name="[15e]"></a>display_finger_press</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssd1305.o(i.display_finger_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_finger_press &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_add
</UL>

<P><STRONG><a name="[15f]"></a>display_finger_realse</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssd1305.o(i.display_finger_realse))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_finger_realse &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_add
</UL>

<P><STRONG><a name="[160]"></a>display_iphone_appoint</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, ssd1305.o(i.display_iphone_appoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_iphone_appoint &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
</UL>

<P><STRONG><a name="[161]"></a>display_iphone_nonexistent</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ssd1305.o(i.display_iphone_nonexistent))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_iphone_nonexistent &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
</UL>

<P><STRONG><a name="[162]"></a>display_iphone_num</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ssd1305.o(i.display_iphone_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_iphone_num &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
</UL>

<P><STRONG><a name="[163]"></a>display_iphone_number</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ssd1305.o(i.display_iphone_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = display_iphone_number &rArr; oled_refresh_gram_with_arg &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram_with_arg
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
</UL>

<P><STRONG><a name="[165]"></a>display_iphone_offline</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ssd1305.o(i.display_iphone_offline))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_iphone_offline &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
</UL>

<P><STRONG><a name="[166]"></a>display_iphone_result</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ssd1305.o(i.display_iphone_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_iphone_result &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
</UL>

<P><STRONG><a name="[167]"></a>display_keyboard_count</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, ssd1305.o(i.display_keyboard_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_keyboard_count &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_lock
</UL>

<P><STRONG><a name="[168]"></a>display_mainmenu</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, ssd1305.o(i.display_mainmenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_mainmenu &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu
</UL>

<P><STRONG><a name="[11c]"></a>display_menu</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, menu.o(i.display_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = display_menu &rArr; display_date_ymd &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_ymd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_company_name
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_battery_update
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Screen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_mode_init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;card_login
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_confirm
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_lock
</UL>

<P><STRONG><a name="[169]"></a>display_number</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ssd1305.o(i.display_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = display_number &rArr; oled_refresh_gram_with_arg &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram_with_arg
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_keyboard_menu
</UL>

<P><STRONG><a name="[16a]"></a>display_number_all</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ssd1305.o(i.display_number_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = display_number_all &rArr; oled_refresh_gram_with_arg &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram_with_arg
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
</UL>

<P><STRONG><a name="[16b]"></a>display_number_card</STRONG> (Thumb, 296 bytes, Stack size 72 bytes, ssd1305.o(i.display_number_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = display_number_card &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_card_menu
</UL>

<P><STRONG><a name="[16c]"></a>display_number_card_const</STRONG> (Thumb, 276 bytes, Stack size 72 bytes, ssd1305.o(i.display_number_card_const))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = display_number_card_const &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word_const
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_card_menu
</UL>

<P><STRONG><a name="[16e]"></a>display_number_del</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ssd1305.o(i.display_number_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = display_number_del &rArr; oled_refresh_gram_with_arg &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram_with_arg
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_keyboard_menu
</UL>

<P><STRONG><a name="[16f]"></a>display_number_finger</STRONG> (Thumb, 388 bytes, Stack size 72 bytes, ssd1305.o(i.display_number_finger))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = display_number_finger &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_fp_menu
</UL>

<P><STRONG><a name="[170]"></a>display_number_finger_const</STRONG> (Thumb, 412 bytes, Stack size 72 bytes, ssd1305.o(i.display_number_finger_const))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = display_number_finger_const &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word_const
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_fp_menu
</UL>

<P><STRONG><a name="[171]"></a>display_number_password</STRONG> (Thumb, 272 bytes, Stack size 72 bytes, ssd1305.o(i.display_number_password))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = display_number_password &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_password_menu
</UL>

<P><STRONG><a name="[172]"></a>display_number_password_const</STRONG> (Thumb, 272 bytes, Stack size 72 bytes, ssd1305.o(i.display_number_password_const))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = display_number_password_const &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word_const
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_password_menu
</UL>

<P><STRONG><a name="[145]"></a>display_one_word</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, ssd1305.o(i.display_one_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_factory_hjs_number
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_wifi_wait
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_wifi_factory_sucess
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_wifi_factory_fail
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_whether_factory
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_unlock_wlan_countdown
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_source_info
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_reset
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_log_null
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_log_menu
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_info_menu
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_host_info
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_exit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_config_wlan_countdown
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_config_wlan
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_config_sucessful
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_config_fail
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_battery_info
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_subsubmenu_sys
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_subsubmenu_add
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_submenu_sys
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_submenu_del
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_submenu_add
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_spe_char_factory
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_spe_char_del
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_spe_char
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_sucess
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_password_full
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_warn_again
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_warn
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_put
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_null
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_exit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_admin
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_operate_sucessful
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_operate_fail
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_password
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_finger
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_del
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_card
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_all
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mainmenu
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_keyboard_count
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_iphone_result
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_iphone_offline
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_iphone_number
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_iphone_num
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_iphone_nonexistent
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_iphone_appoint
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_realse
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_press
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_null
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_full
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_fail
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_exit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_del_sucess
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_del_fail
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_check_fail
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_factory_success
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_factory_sel
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_factory_fail
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_del_sucessful
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_del_failed
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_ymd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_set
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_confirm
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_check_sucessful
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_check_failed
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_card_rigister
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_card_null
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_card_non_exit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_card_full
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_card_exit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_battery_warn
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_battery_update
</UL>

<P><STRONG><a name="[16d]"></a>display_one_word_const</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ssd1305.o(i.display_one_word_const))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = display_one_word_const
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_password_const
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_finger_const
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_card_const
</UL>

<P><STRONG><a name="[173]"></a>display_operate_fail</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssd1305.o(i.display_operate_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_operate_fail &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu_sub
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_keyboard_menu
</UL>

<P><STRONG><a name="[174]"></a>display_operate_sucessful</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ssd1305.o(i.display_operate_sucessful))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_operate_sucessful &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
</UL>

<P><STRONG><a name="[176]"></a>display_passwod_admin</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssd1305.o(i.display_passwod_admin))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_passwod_admin &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
</UL>

<P><STRONG><a name="[177]"></a>display_passwod_exit</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssd1305.o(i.display_passwod_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_passwod_exit &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_keyboard_menu
</UL>

<P><STRONG><a name="[178]"></a>display_passwod_null</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssd1305.o(i.display_passwod_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_passwod_null &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_password_menu
</UL>

<P><STRONG><a name="[179]"></a>display_passwod_put</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ssd1305.o(i.display_passwod_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_passwod_put &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
</UL>

<P><STRONG><a name="[17a]"></a>display_passwod_warn</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, ssd1305.o(i.display_passwod_warn))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_passwod_warn &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_keyboard_menu
</UL>

<P><STRONG><a name="[17b]"></a>display_passwod_warn_again</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ssd1305.o(i.display_passwod_warn_again))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_passwod_warn_again &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_keyboard_menu
</UL>

<P><STRONG><a name="[17c]"></a>display_password_full</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssd1305.o(i.display_password_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_password_full &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_keyboard_menu
</UL>

<P><STRONG><a name="[17d]"></a>display_set_sucess</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssd1305.o(i.display_set_sucess))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_set_sucess &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_date_menu
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_set
</UL>

<P><STRONG><a name="[17e]"></a>display_spe_char</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ssd1305.o(i.display_spe_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = display_spe_char &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
</UL>

<P><STRONG><a name="[17f]"></a>display_spe_char_del</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ssd1305.o(i.display_spe_char_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = display_spe_char_del &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
</UL>

<P><STRONG><a name="[180]"></a>display_spe_char_factory</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ssd1305.o(i.display_spe_char_factory))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = display_spe_char_factory &rArr; oled_refresh_gram_with_arg &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram_with_arg
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
</UL>

<P><STRONG><a name="[181]"></a>display_submenu_add</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, ssd1305.o(i.display_submenu_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_submenu_add &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_menu
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu
</UL>

<P><STRONG><a name="[182]"></a>display_submenu_del</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, ssd1305.o(i.display_submenu_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = display_submenu_del &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_menu_sub
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_hak_menu_sub
</UL>

<P><STRONG><a name="[183]"></a>display_submenu_sys</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, ssd1305.o(i.display_submenu_sys))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_submenu_sys &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_menu
</UL>

<P><STRONG><a name="[184]"></a>display_subsubmenu_add</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, ssd1305.o(i.display_subsubmenu_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = display_subsubmenu_add &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu_sub
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_hak_menu_sub
</UL>

<P><STRONG><a name="[185]"></a>display_subsubmenu_sys</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, ssd1305.o(i.display_subsubmenu_sys))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_subsubmenu_sys &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_set
</UL>

<P><STRONG><a name="[186]"></a>display_sys_battery_info</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ssd1305.o(i.display_sys_battery_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_sys_battery_info &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_battery_used_log
</UL>

<P><STRONG><a name="[187]"></a>display_sys_config_fail</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ssd1305.o(i.display_sys_config_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_sys_config_fail &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan_countdown
</UL>

<P><STRONG><a name="[188]"></a>display_sys_config_sucessful</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ssd1305.o(i.display_sys_config_sucessful))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_sys_config_sucessful &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan_countdown
</UL>

<P><STRONG><a name="[189]"></a>display_sys_config_wlan</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, ssd1305.o(i.display_sys_config_wlan))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = display_sys_config_wlan &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan
</UL>

<P><STRONG><a name="[18a]"></a>display_sys_config_wlan_countdown</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ssd1305.o(i.display_sys_config_wlan_countdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_sys_config_wlan_countdown &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_smart_config
</UL>

<P><STRONG><a name="[18b]"></a>display_sys_exit</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ssd1305.o(i.display_sys_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_sys_exit &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
</UL>

<P><STRONG><a name="[18c]"></a>display_sys_host_info</STRONG> (Thumb, 394 bytes, Stack size 32 bytes, ssd1305.o(i.display_sys_host_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = display_sys_host_info &rArr; wifi_get_mac &rArr; wifi_trans_recev_command &rArr; usart3_recv_parse &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_mac
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_host_about_log
</UL>

<P><STRONG><a name="[18f]"></a>display_sys_info_menu</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, ssd1305.o(i.display_sys_info_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_sys_info_menu &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_menu
</UL>

<P><STRONG><a name="[190]"></a>display_sys_log_menu</STRONG> (Thumb, 1336 bytes, Stack size 40 bytes, ssd1305.o(i.display_sys_log_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = display_sys_log_menu &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_operator_log
</UL>

<P><STRONG><a name="[191]"></a>display_sys_log_null</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssd1305.o(i.display_sys_log_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_sys_log_null &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_operator_log
</UL>

<P><STRONG><a name="[192]"></a>display_sys_reset</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ssd1305.o(i.display_sys_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_sys_reset &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_reset
</UL>

<P><STRONG><a name="[193]"></a>display_sys_source_info</STRONG> (Thumb, 1046 bytes, Stack size 40 bytes, ssd1305.o(i.display_sys_source_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = display_sys_source_info &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_resource_used_log
</UL>

<P><STRONG><a name="[194]"></a>display_sys_unlock_wlan_countdown</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ssd1305.o(i.display_sys_unlock_wlan_countdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_sys_unlock_wlan_countdown &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
</UL>

<P><STRONG><a name="[195]"></a>display_whether_factory</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, ssd1305.o(i.display_whether_factory))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_whether_factory &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_factory_menu
</UL>

<P><STRONG><a name="[196]"></a>display_wifi_factory_fail</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ssd1305.o(i.display_wifi_factory_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_wifi_factory_fail &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
</UL>

<P><STRONG><a name="[197]"></a>display_wifi_factory_sucess</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ssd1305.o(i.display_wifi_factory_sucess))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_wifi_factory_sucess &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
</UL>

<P><STRONG><a name="[198]"></a>display_wifi_wait</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ssd1305.o(i.display_wifi_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_wifi_wait &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_one_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_smart_config
</UL>

<P><STRONG><a name="[199]"></a>double_point_parse</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wifi_8266.o(i.double_point_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = double_point_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_mac
</UL>

<P><STRONG><a name="[9e]"></a>factory_reset</STRONG> (Thumb, 214 bytes, Stack size 176 bytes, flash.o(i.factory_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = factory_reset &rArr; fp_sleep &rArr; fp_tarns_recv_command &rArr; fp_pakge_recv_parse &rArr; usart2_recv_data &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_sleep
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_power_on
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_tarns_recv_command
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_factory_menu
</UL>

<P><STRONG><a name="[19f]"></a>finger_login</STRONG> (Thumb, 898 bytes, Stack size 240 bytes, menu.o(i.finger_login))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = finger_login &rArr; fp_sleep &rArr; fp_tarns_recv_command &rArr; fp_pakge_recv_parse &rArr; usart2_recv_data &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_on
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_sleep
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UNLOCK
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2_Start
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_battery
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_log_record
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_tarns_recv_command
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_led_white
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_led_shutdown
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_led_red
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_led_green
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_led_config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_battery_get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_check_fail
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_confirm
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_battery_warn
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a5]"></a>flash_exit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, flash.o(i.flash_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_exit &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[11a]"></a>flash_init</STRONG> (Thumb, 682 bytes, Stack size 40 bytes, flash.o(i.flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = flash_init &rArr; stm_flash_erase_write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_exit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_mode_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_reset
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
</UL>

<P><STRONG><a name="[1a7]"></a>fp_add</STRONG> (Thumb, 1530 bytes, Stack size 240 bytes, fpcst90x.o(i.fp_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = fp_add &rArr; fp_led_red &rArr; fp_tarns_recv_command &rArr; fp_pakge_recv_parse &rArr; usart2_recv_data &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_on
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_power_on
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_log_record
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_tarns_recv_command
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_led_red
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_led_green
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_led_config
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_realse
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_press
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_check_sucessful
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu_sub
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_hak_menu_sub
</UL>

<P><STRONG><a name="[1a8]"></a>fp_delete</STRONG> (Thumb, 406 bytes, Stack size 232 bytes, fpcst90x.o(i.fp_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = fp_delete &rArr; fp_power_on &rArr; MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_on
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_power_on
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_log_record
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_tarns_recv_command
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_del_sucess
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_fp_menu
</UL>

<P><STRONG><a name="[1a0]"></a>fp_led_config</STRONG> (Thumb, 108 bytes, Stack size 176 bytes, fpcst90x.o(i.fp_led_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = fp_led_config &rArr; fp_tarns_recv_command &rArr; fp_pakge_recv_parse &rArr; usart2_recv_data &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_tarns_recv_command
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_add
</UL>

<P><STRONG><a name="[1a2]"></a>fp_led_green</STRONG> (Thumb, 112 bytes, Stack size 176 bytes, fpcst90x.o(i.fp_led_green))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = fp_led_green &rArr; fp_tarns_recv_command &rArr; fp_pakge_recv_parse &rArr; usart2_recv_data &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_tarns_recv_command
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_add
</UL>

<P><STRONG><a name="[1a1]"></a>fp_led_red</STRONG> (Thumb, 112 bytes, Stack size 176 bytes, fpcst90x.o(i.fp_led_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = fp_led_red &rArr; fp_tarns_recv_command &rArr; fp_pakge_recv_parse &rArr; usart2_recv_data &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_tarns_recv_command
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_add
</UL>

<P><STRONG><a name="[1a4]"></a>fp_led_shutdown</STRONG> (Thumb, 60 bytes, Stack size 152 bytes, fpcst90x.o(i.fp_led_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = fp_led_shutdown &rArr; fp_tarns_recv_command &rArr; fp_pakge_recv_parse &rArr; usart2_recv_data &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_tarns_recv_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu_sub
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_hak_menu_sub
</UL>

<P><STRONG><a name="[1a3]"></a>fp_led_white</STRONG> (Thumb, 114 bytes, Stack size 176 bytes, fpcst90x.o(i.fp_led_white))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = fp_led_white &rArr; fp_tarns_recv_command &rArr; fp_pakge_recv_parse &rArr; usart2_recv_data &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_tarns_recv_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu_sub
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_hak_menu_sub
</UL>

<P><STRONG><a name="[1a9]"></a>fp_pakge_recv_parse</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, fpcst90x.o(i.fp_pakge_recv_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fp_pakge_recv_parse &rArr; usart2_recv_data &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_recv_data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkout_sum_tool
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_tarns_recv_command
</UL>

<P><STRONG><a name="[1ab]"></a>fp_power_off</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, fpcst90x.o(i.fp_power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fp_power_off &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_sleep
</UL>

<P><STRONG><a name="[a3]"></a>fp_power_on</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, fpcst90x.o(i.fp_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fp_power_on &rArr; MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_mode_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_reset
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_delete
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_add
</UL>

<P><STRONG><a name="[1ad]"></a>fp_recev_buff_clear</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fpcst90x.o(i.fp_recev_buff_clear))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_tarns_recv_command
</UL>

<P><STRONG><a name="[19d]"></a>fp_sleep</STRONG> (Thumb, 130 bytes, Stack size 184 bytes, fpcst90x.o(i.fp_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = fp_sleep &rArr; fp_tarns_recv_command &rArr; fp_pakge_recv_parse &rArr; usart2_recv_data &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_power_off
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_tarns_recv_command
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_mode_init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_reset
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
</UL>

<P><STRONG><a name="[1b0]"></a>fp_str_copy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fpcst90x.o(i.fp_str_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fp_str_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_usart2_send
</UL>

<P><STRONG><a name="[19c]"></a>fp_tarns_recv_command</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, fpcst90x.o(i.fp_tarns_recv_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fp_tarns_recv_command &rArr; fp_pakge_recv_parse &rArr; usart2_recv_data &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_usart2_send
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_trans_buff_clear
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_recev_buff_clear
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_pakge_recv_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_sleep
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_reset
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_delete
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_add
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_led_white
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_led_shutdown
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_led_red
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_led_green
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_led_config
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
</UL>

<P><STRONG><a name="[1ac]"></a>fp_trans_buff_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fpcst90x.o(i.fp_trans_buff_clear))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_tarns_recv_command
</UL>

<P><STRONG><a name="[1ae]"></a>fp_usart2_send</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, fpcst90x.o(i.fp_usart2_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fp_usart2_send &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_str_copy
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;caculator_hex_sum
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakePackageHead
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_tarns_recv_command
</UL>

<P><STRONG><a name="[50]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[1a6]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_user_info
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_exit
</UL>

<P><STRONG><a name="[1b1]"></a>horn_powerOff</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, win6170.o(i.horn_powerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = horn_powerOff
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
</UL>

<P><STRONG><a name="[116]"></a>horn_powerOn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, win6170.o(i.horn_powerOn))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_mode_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
</UL>

<P><STRONG><a name="[119]"></a>init_ic</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, ssd1305.o(i.init_ic))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = init_ic &rArr; Clear_Screen &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Screen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_mode_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
</UL>

<P><STRONG><a name="[1b2]"></a>keyboard_lock</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, menu.o(i.keyboard_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = keyboard_lock &rArr; wifi_upload_tryErr_info &rArr; stm_flash_erase_write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_tryErr_info
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_keyboard_count
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
</UL>

<P><STRONG><a name="[1b4]"></a>keyboard_login</STRONG> (Thumb, 652 bytes, Stack size 72 bytes, menu.o(i.keyboard_login))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = keyboard_login &rArr; factory_test &rArr; fp_sleep &rArr; fp_tarns_recv_command &rArr; fp_pakge_recv_parse &rArr; usart2_recv_data &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UNLOCK
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2_Start
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_confirm
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_lock
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_spe_char_del
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_spe_char
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_put
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_admin
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_factory_success
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_factory_fail
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b5]"></a>keyboard_password_confirm</STRONG> (Thumb, 860 bytes, Stack size 128 bytes, keyboard.o(i.keyboard_password_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = keyboard_password_confirm &rArr; wifi_remote_open &rArr; wifi_get_mac &rArr; wifi_trans_recev_command &rArr; usart3_recv_parse &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_on
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_battery
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_log_record
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_battery_get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_confirm
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_battery_warn
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
</UL>

<P><STRONG><a name="[1b7]"></a>keyboard_password_del</STRONG> (Thumb, 370 bytes, Stack size 88 bytes, keyboard.o(i.keyboard_password_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = keyboard_password_del &rArr; sys_log_record &rArr; stm_flash_erase_write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_on
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_log_record
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_password_menu
</UL>

<P><STRONG><a name="[1b8]"></a>keyboard_password_save</STRONG> (Thumb, 446 bytes, Stack size 88 bytes, keyboard.o(i.keyboard_password_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = keyboard_password_save &rArr; display_check_sucessful &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_on
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_log_record
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_check_sucessful
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_keyboard_menu
</UL>

<P><STRONG><a name="[1b9]"></a>led_powerOff</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, 74hc595.o(i.led_powerOff))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
</UL>

<P><STRONG><a name="[118]"></a>led_powerOn</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, 74hc595.o(i.led_powerOn))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_mode_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
</UL>

<P><STRONG><a name="[4a]"></a>main</STRONG> (Thumb, 504 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 8864<LI>Call Chain = main &rArr; sleep_mode &rArr; wifi_upload_all_info &rArr; wifi_server_time_syn &rArr; wifi_parase_time &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_all_info
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu_sub
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_mode_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_sleep
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_power_on
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;card_login
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1bb]"></a>main_menu</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, menu.o(i.main_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = main_menu &rArr; user_delete_menu &rArr; user_delete_menu_sub &rArr; user_delete_fp_menu &rArr; fp_delete &rArr; fp_power_on &rArr; MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_menu
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_menu
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_menu
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_repeat
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mainmenu
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[1ba]"></a>multi_mode_init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, menu.o(i.multi_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = multi_mode_init &rArr; nfc9883_init &rArr; phhalHw_Rc663_Cmd_LpcdConfig &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_sleep
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_power_on
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOCK
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_powerOn
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc9883_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;horn_powerOn
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_powerOn
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ic
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IC
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c4]"></a>nfc9883_init</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, nfc9883.o(i.nfc9883_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = nfc9883_init &rArr; phhalHw_Rc663_Cmd_LpcdConfig &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalMifare_Sw_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_Init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Cmd_SoftReset
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Cmd_Lpcd_Set
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Cmd_LpcdConfig
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_FieldReset
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ApplyProtocolSettings
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_Stub_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phalMfc_Sw_Init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_Rc663_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_RC663_device
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_mode_init
</UL>

<P><STRONG><a name="[1d0]"></a>nfc_add</STRONG> (Thumb, 734 bytes, Stack size 88 bytes, nfc.o(i.nfc_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nfc_add &rArr; APT_KeyEnableSel &rArr; APT_WriteChipReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_on
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_log_record
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_check_sucessful
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_card_rigister
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu_sub
</UL>

<P><STRONG><a name="[1d1]"></a>nfc_delete</STRONG> (Thumb, 388 bytes, Stack size 88 bytes, nfc.o(i.nfc_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nfc_delete &rArr; sys_log_record &rArr; stm_flash_erase_write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_on
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_log_record
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_del_sucessful
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_card_menu
</UL>

<P><STRONG><a name="[82]"></a>oled_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssd1305.o(i.oled_init))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_mode_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_factory_hjs_number
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_wifi_wait
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_wifi_factory_sucess
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_wifi_factory_fail
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_whether_factory
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_source_info
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_reset
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_log_null
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_info_menu
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_host_info
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_exit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_config_wlan
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_config_sucessful
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_config_fail
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_battery_info
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_subsubmenu_sys
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_subsubmenu_add
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_submenu_sys
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_submenu_del
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_submenu_add
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_sucess
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_password_full
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_warn_again
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_warn
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_put
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_null
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_exit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_admin
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_operate_sucessful
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_operate_fail
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mainmenu
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_keyboard_count
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_iphone_result
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_iphone_offline
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_iphone_num
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_iphone_nonexistent
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_iphone_appoint
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_realse
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_press
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_null
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_full
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_fail
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_exit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_del_sucess
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_del_fail
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_check_fail
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_factory_success
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_factory_sel
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_factory_fail
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_del_sucessful
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_del_failed
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_set
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_confirm
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_company_name
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_check_sucessful
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_check_failed
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_card_rigister
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_card_null
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_card_non_exit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_card_full
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_card_exit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_battery_warn
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Screen
</UL>

<P><STRONG><a name="[1d2]"></a>oled_powerOff</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssd1305.o(i.oled_powerOff))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
</UL>

<P><STRONG><a name="[117]"></a>oled_powerOn</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssd1305.o(i.oled_powerOn))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_mode_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
</UL>

<P><STRONG><a name="[146]"></a>oled_refresh_gram</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ssd1305.o(i.oled_refresh_gram))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_factory_hjs_number
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_wifi_wait
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_wifi_factory_sucess
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_wifi_factory_fail
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_whether_factory
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_unlock_wlan_countdown
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_source_info
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_reset
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_log_null
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_log_menu
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_info_menu
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_host_info
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_exit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_config_wlan_countdown
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_config_wlan
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_config_sucessful
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_config_fail
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_battery_info
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_subsubmenu_sys
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_subsubmenu_add
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_submenu_sys
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_submenu_del
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_submenu_add
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_spe_char_del
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_spe_char
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_sucess
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_password_full
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_warn_again
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_warn
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_put
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_null
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_exit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_admin
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_operate_sucessful
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_operate_fail
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_password_const
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_password
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_finger_const
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_finger
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_card_const
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_card
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_mainmenu
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_keyboard_count
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_iphone_result
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_iphone_offline
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_iphone_num
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_iphone_nonexistent
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_iphone_appoint
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_realse
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_press
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_null
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_full
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_fail
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_exit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_del_sucess
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_del_fail
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_check_fail
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_factory_success
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_factory_sel
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_factory_fail
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_del_sucessful
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_del_failed
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_ymd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_set
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_confirm
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_check_sucessful
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_check_failed
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_card_rigister
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_card_null
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_card_non_exit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_card_full
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_card_exit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_battery_warn
</UL>

<P><STRONG><a name="[164]"></a>oled_refresh_gram_with_arg</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ssd1305.o(i.oled_refresh_gram_with_arg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = oled_refresh_gram_with_arg &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_spe_char_factory
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_del
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_all
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_iphone_number
</UL>

<P><STRONG><a name="[1d3]"></a>oled_refresh_gram_with_multi_arg</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ssd1305.o(i.oled_refresh_gram_with_multi_arg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = oled_refresh_gram_with_multi_arg &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_date_menu
</UL>

<P><STRONG><a name="[1cc]"></a>phKeyStore_Rc663_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, phkeystore_rc663.o(i.phKeyStore_Rc663_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc9883_init
</UL>

<P><STRONG><a name="[1cd]"></a>phalMfc_Sw_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, phalmfc_sw.o(i.phalMfc_Sw_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc9883_init
</UL>

<P><STRONG><a name="[1d4]"></a>phbalReg_Exchange</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, phbalreg.o(i.phbalReg_Exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_Stub_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_WriteRegister
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_ReadRegister
</UL>

<P><STRONG><a name="[1d5]"></a>phbalReg_Stub_Exchange</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, phbalreg_stub.o(i.phbalReg_Stub_Exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwSetReg
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwGetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_Exchange
</UL>

<P><STRONG><a name="[1c6]"></a>phbalReg_Stub_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, phbalreg_stub.o(i.phbalReg_Stub_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = phbalReg_Stub_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegCtl_SpiHwInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc9883_init
</UL>

<P><STRONG><a name="[13f]"></a>phhalHw_ApplyProtocolSettings</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, phhalhw.o(i.phhalHw_ApplyProtocolSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = phhalHw_ApplyProtocolSettings &rArr; phhalHw_Rc663_ApplyProtocolSettings &rArr; phhalHw_SetConfig &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_ApplyProtocolSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_card
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc9883_init
</UL>

<P><STRONG><a name="[1d8]"></a>phhalHw_Exchange</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, phhalhw.o(i.phhalHw_Exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = phhalHw_Exchange &rArr; phhalHw_Rc663_Exchange &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_RequestBEx
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_RequestAEx
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Anticollision
</UL>

<P><STRONG><a name="[1cf]"></a>phhalHw_FieldReset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, phhalhw.o(i.phhalHw_FieldReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = phhalHw_FieldReset &rArr; phhalHw_Rc663_FieldReset &rArr; phhalHw_Rc663_Wait &rArr; phhalHw_Rc663_WaitIrq &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_FieldReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc9883_init
</UL>

<P><STRONG><a name="[1db]"></a>phhalHw_GetConfig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, phhalhw.o(i.phhalHw_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = phhalHw_GetConfig &rArr; phhalHw_Rc663_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc663_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_GetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Cmd_LpcdConfig
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Anticollision
</UL>

<P><STRONG><a name="[1d7]"></a>phhalHw_Rc663_ApplyProtocolSettings</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, phhalhw_rc663.o(i.phhalHw_Rc663_ApplyProtocolSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = phhalHw_Rc663_ApplyProtocolSettings &rArr; phhalHw_SetConfig &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetConfig
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetCardMode
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ApplyProtocolSettings
</UL>

<P><STRONG><a name="[1e0]"></a>phhalHw_Rc663_Cmd_LoadProtocol</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, phhalhw_rc663_cmd.o(i.phhalHw_Rc663_Cmd_LoadProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = phhalHw_Rc663_Cmd_LoadProtocol &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Command_Int
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetCardMode
</UL>

<P><STRONG><a name="[1e2]"></a>phhalHw_Rc663_Cmd_LoadReg</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, phhalhw_rc663_cmd.o(i.phhalHw_Rc663_Cmd_LoadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Command_Int
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetCardMode
</UL>

<P><STRONG><a name="[1e3]"></a>phhalHw_Rc663_Cmd_Lpcd</STRONG> (Thumb, 730 bytes, Stack size 88 bytes, phhalhw_rc663_cmd.o(i.phhalHw_Rc663_Cmd_Lpcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = phhalHw_Rc663_Cmd_Lpcd &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Command_Int
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Cmd_LpcdConfig
</UL>

<P><STRONG><a name="[142]"></a>phhalHw_Rc663_Cmd_LpcdConfig</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, phhalhw_rc663_cmd.o(i.phhalHw_Rc663_Cmd_LpcdConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = phhalHw_Rc663_Cmd_LpcdConfig &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetConfig
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_GetConfig
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_GetConfig
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Cmd_Lpcd
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_card
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc9883_init
</UL>

<P><STRONG><a name="[143]"></a>phhalHw_Rc663_Cmd_Lpcd_Set</STRONG> (Thumb, 588 bytes, Stack size 88 bytes, phhalhw_rc663_cmd.o(i.phhalHw_Rc663_Cmd_Lpcd_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = phhalHw_Rc663_Cmd_Lpcd_Set &rArr; phhalHw_Rc663_Command_Int_Set &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Command_Int_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_card
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc9883_init
</UL>

<P><STRONG><a name="[1ce]"></a>phhalHw_Rc663_Cmd_SoftReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, phhalhw_rc663_cmd.o(i.phhalHw_Rc663_Cmd_SoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = phhalHw_Rc663_Cmd_SoftReset &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc9883_init
</UL>

<P><STRONG><a name="[1e1]"></a>phhalHw_Rc663_Command_Int</STRONG> (Thumb, 756 bytes, Stack size 104 bytes, phhalhw_rc663_int.o(i.phhalHw_Rc663_Command_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_WriteFifo
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_WaitIrq
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_ReadFifo
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_GetRxBuffer
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_FlushFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Cmd_Lpcd
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Cmd_LoadReg
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Cmd_LoadProtocol
</UL>

<P><STRONG><a name="[1e4]"></a>phhalHw_Rc663_Command_Int_Set</STRONG> (Thumb, 384 bytes, Stack size 72 bytes, phhalhw_rc663_int.o(i.phhalHw_Rc663_Command_Int_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = phhalHw_Rc663_Command_Int_Set &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_WriteFifo
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_GetRxBuffer
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_FlushFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Cmd_Lpcd_Set
</UL>

<P><STRONG><a name="[1d9]"></a>phhalHw_Rc663_Exchange</STRONG> (Thumb, 1250 bytes, Stack size 104 bytes, phhalhw_rc663.o(i.phhalHw_Rc663_Exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = phhalHw_Rc663_Exchange &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_WriteRegister
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetConfig
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_FieldReset
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_WriteFifo
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_WaitIrq
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_ReadFifo
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_GetTxBuffer
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_GetRxBuffer
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_GetFdt
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_FlushFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
</UL>

<P><STRONG><a name="[1ed]"></a>phhalHw_Rc663_FieldOff</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, phhalhw_rc663.o(i.phhalHw_Rc663_FieldOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = phhalHw_Rc663_FieldOff &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_FieldReset
</UL>

<P><STRONG><a name="[1ee]"></a>phhalHw_Rc663_FieldOn</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, phhalhw_rc663.o(i.phhalHw_Rc663_FieldOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = phhalHw_Rc663_FieldOn &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_FieldReset
</UL>

<P><STRONG><a name="[1da]"></a>phhalHw_Rc663_FieldReset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, phhalhw_rc663.o(i.phhalHw_Rc663_FieldReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = phhalHw_Rc663_FieldReset &rArr; phhalHw_Rc663_Wait &rArr; phhalHw_Rc663_WaitIrq &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Wait
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_FieldOn
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_FieldOff
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Exchange
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_FieldReset
</UL>

<P><STRONG><a name="[1e6]"></a>phhalHw_Rc663_FlushFifo</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, phhalhw_rc663_int.o(i.phhalHw_Rc663_FlushFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = phhalHw_Rc663_FlushFifo &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Exchange
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_ReadFifo
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Command_Int_Set
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Command_Int
</UL>

<P><STRONG><a name="[1dc]"></a>phhalHw_Rc663_GetConfig</STRONG> (Thumb, 618 bytes, Stack size 40 bytes, phhalhw_rc663.o(i.phhalHw_Rc663_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = phhalHw_Rc663_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc663_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_GetTxBuffer
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_GetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_GetConfig
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Cmd_LpcdConfig
</UL>

<P><STRONG><a name="[1f0]"></a>phhalHw_Rc663_GetDigiDelay</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, phhalhw_rc663_int.o(i.phhalHw_Rc663_GetDigiDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = phhalHw_Rc663_GetDigiDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetFdt
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_GetFdt
</UL>

<P><STRONG><a name="[1ec]"></a>phhalHw_Rc663_GetFdt</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, phhalhw_rc663_int.o(i.phhalHw_Rc663_GetFdt))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = phhalHw_Rc663_GetFdt &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc663_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_GetDigiDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Exchange
</UL>

<P><STRONG><a name="[1e5]"></a>phhalHw_Rc663_GetRxBuffer</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, phhalhw_rc663_int.o(i.phhalHw_Rc663_GetRxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = phhalHw_Rc663_GetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetConfig
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_GetConfig
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Exchange
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_GetTxBuffer
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Command_Int_Set
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Command_Int
</UL>

<P><STRONG><a name="[1ea]"></a>phhalHw_Rc663_GetTxBuffer</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, phhalhw_rc663_int.o(i.phhalHw_Rc663_GetTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = phhalHw_Rc663_GetTxBuffer &rArr; phhalHw_Rc663_GetRxBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_GetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetConfig
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_GetConfig
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Exchange
</UL>

<P><STRONG><a name="[1c7]"></a>phhalHw_Rc663_Init</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, phhalhw_rc663.o(i.phhalHw_Rc663_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = phhalHw_Rc663_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc9883_init
</UL>

<P><STRONG><a name="[1f1]"></a>phhalHw_Rc663_ReadData</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, phhalhw_rc663_int.o(i.phhalHw_Rc663_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = phhalHw_Rc663_ReadData &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc663_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_ReadFifo
</UL>

<P><STRONG><a name="[1e9]"></a>phhalHw_Rc663_ReadFifo</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, phhalhw_rc663_int.o(i.phhalHw_Rc663_ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = phhalHw_Rc663_ReadFifo &rArr; phhalHw_Rc663_ReadData &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc663_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_FlushFifo
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Exchange
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Command_Int
</UL>

<P><STRONG><a name="[1f2]"></a>phhalHw_Rc663_ReadRegister</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, phhalhw_rc663.o(i.phhalHw_Rc663_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = phhalHw_Rc663_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
</UL>

<P><STRONG><a name="[1de]"></a>phhalHw_Rc663_SetCardMode</STRONG> (Thumb, 806 bytes, Stack size 40 bytes, phhalhw_rc663_int.o(i.phhalHw_Rc663_SetCardMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetTxWait
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetConfig_Int
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Cmd_LoadReg
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Cmd_LoadProtocol
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetConfig
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_ApplyProtocolSettings
</UL>

<P><STRONG><a name="[1dd]"></a>phhalHw_Rc663_SetConfig</STRONG> (Thumb, 1192 bytes, Stack size 48 bytes, phhalhw_rc663.o(i.phhalHw_Rc663_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetTxWait
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetRxWait
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetFdt
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetConfig_Int
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetCardMode
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_GetTxBuffer
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_GetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Exchange
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_ApplyProtocolSettings
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Cmd_LpcdConfig
</UL>

<P><STRONG><a name="[1f3]"></a>phhalHw_Rc663_SetConfig_Int</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, phhalhw_rc663_int.o(i.phhalHw_Rc663_SetConfig_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = phhalHw_Rc663_SetConfig_Int &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetConfig
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetCardMode
</UL>

<P><STRONG><a name="[1f6]"></a>phhalHw_Rc663_SetFdt</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, phhalhw_rc663_int.o(i.phhalHw_Rc663_SetFdt))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = phhalHw_Rc663_SetFdt &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_GetDigiDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Wait
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetConfig
</UL>

<P><STRONG><a name="[1f5]"></a>phhalHw_Rc663_SetRxWait</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, phhalhw_rc663_int.o(i.phhalHw_Rc663_SetRxWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = phhalHw_Rc663_SetRxWait &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetConfig
</UL>

<P><STRONG><a name="[1f4]"></a>phhalHw_Rc663_SetTxWait</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, phhalhw_rc663_int.o(i.phhalHw_Rc663_SetTxWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = phhalHw_Rc663_SetTxWait &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetConfig
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetCardMode
</UL>

<P><STRONG><a name="[1ef]"></a>phhalHw_Rc663_Wait</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, phhalhw_rc663.o(i.phhalHw_Rc663_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = phhalHw_Rc663_Wait &rArr; phhalHw_Rc663_WaitIrq &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_WaitIrq
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetFdt
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_FieldReset
</UL>

<P><STRONG><a name="[1e8]"></a>phhalHw_Rc663_WaitIrq</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, phhalhw_rc663_wait.o(i.phhalHw_Rc663_WaitIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = phhalHw_Rc663_WaitIrq &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Wait
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Exchange
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Command_Int
</UL>

<P><STRONG><a name="[1f7]"></a>phhalHw_Rc663_WriteData</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, phhalhw_rc663_int.o(i.phhalHw_Rc663_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_WriteFifo
</UL>

<P><STRONG><a name="[1e7]"></a>phhalHw_Rc663_WriteFifo</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, phhalhw_rc663_int.o(i.phhalHw_Rc663_WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Exchange
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Command_Int_Set
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Command_Int
</UL>

<P><STRONG><a name="[1eb]"></a>phhalHw_Rc663_WriteRegister</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, phhalhw_rc663.o(i.phhalHw_Rc663_WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Exchange
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
</UL>

<P><STRONG><a name="[13d]"></a>phhalHw_ReadRegister</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, phhalhw.o(i.phhalHw_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = phhalHw_ReadRegister &rArr; phhalHw_Rc663_ReadRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_card
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Wait
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetConfig
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_GetConfig
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_FieldOn
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_FieldOff
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Exchange
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Cmd_Lpcd_Set
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Cmd_LpcdConfig
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc9883_init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_WriteFifo
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_WaitIrq
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetTxWait
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetConfig_Int
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetCardMode
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_ReadFifo
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_GetFdt
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_FlushFifo
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_ReadData
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Command_Int_Set
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Command_Int
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Cmd_Lpcd
</UL>

<P><STRONG><a name="[1df]"></a>phhalHw_SetConfig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, phhalhw.o(i.phhalHw_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = phhalHw_SetConfig &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_ApplyProtocolSettings
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_RequestBEx
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_RequestAEx
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Anticollision
</UL>

<P><STRONG><a name="[13e]"></a>phhalHw_WriteRegister</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, phhalhw.o(i.phhalHw_WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_card
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Wait
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetConfig
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_FieldOn
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_FieldOff
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Exchange
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_ApplyProtocolSettings
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Cmd_SoftReset
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Cmd_Lpcd_Set
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Cmd_LpcdConfig
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_WaitIrq
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetTxWait
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetRxWait
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetFdt
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetConfig_Int
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_SetCardMode
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_FlushFifo
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_WriteData
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Command_Int_Set
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Command_Int
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc663_Cmd_Lpcd
</UL>

<P><STRONG><a name="[140]"></a>phpalI14443p3a_ActivateCard</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, phpali14443p3a.o(i.phpalI14443p3a_ActivateCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = phpalI14443p3a_ActivateCard &rArr; phpalI14443p3a_Sw_ActivateCard &rArr; phpalI14443p3a_Sw_Select &rArr; phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc663_Exchange &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_ActivateCard
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_card
</UL>

<P><STRONG><a name="[1f8]"></a>phpalI14443p3a_Sw_ActivateCard</STRONG> (Thumb, 314 bytes, Stack size 72 bytes, phpali14443p3a_sw.o(i.phpalI14443p3a_Sw_ActivateCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = phpalI14443p3a_Sw_ActivateCard &rArr; phpalI14443p3a_Sw_Select &rArr; phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc663_Exchange &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_WakeUpA
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Select
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_RequestA
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Anticollision
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_ActivateCard
</UL>

<P><STRONG><a name="[1fb]"></a>phpalI14443p3a_Sw_Anticollision</STRONG> (Thumb, 672 bytes, Stack size 64 bytes, phpali14443p3a_sw.o(i.phpalI14443p3a_Sw_Anticollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc663_Exchange &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_GetConfig
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Select
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_ActivateCard
</UL>

<P><STRONG><a name="[1c8]"></a>phpalI14443p3a_Sw_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, phpali14443p3a_sw.o(i.phpalI14443p3a_Sw_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc9883_init
</UL>

<P><STRONG><a name="[1fa]"></a>phpalI14443p3a_Sw_RequestA</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, phpali14443p3a_sw.o(i.phpalI14443p3a_Sw_RequestA))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_ActivateCard
</UL>

<P><STRONG><a name="[1fd]"></a>phpalI14443p3a_Sw_RequestAEx</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, phpali14443p3a_sw.o(i.phpalI14443p3a_Sw_RequestAEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = phpalI14443p3a_Sw_RequestAEx &rArr; phhalHw_Exchange &rArr; phhalHw_Rc663_Exchange &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_WakeUpA
</UL>

<P><STRONG><a name="[1fc]"></a>phpalI14443p3a_Sw_Select</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, phpali14443p3a_sw.o(i.phpalI14443p3a_Sw_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = phpalI14443p3a_Sw_Select &rArr; phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc663_Exchange &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Anticollision
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_ActivateCard
</UL>

<P><STRONG><a name="[1f9]"></a>phpalI14443p3a_Sw_WakeUpA</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, phpali14443p3a_sw.o(i.phpalI14443p3a_Sw_WakeUpA))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = phpalI14443p3a_Sw_WakeUpA &rArr; phpalI14443p3a_Sw_RequestAEx &rArr; phhalHw_Exchange &rArr; phhalHw_Rc663_Exchange &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_RequestAEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_ActivateCard
</UL>

<P><STRONG><a name="[141]"></a>phpalI14443p3b_RequestB</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, phpali14443p3b.o(i.phpalI14443p3b_RequestB))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = phpalI14443p3b_RequestB &rArr; phpalI14443p3b_Sw_RequestB &rArr; phpalI14443p3b_Sw_RequestBEx &rArr; phhalHw_Exchange &rArr; phhalHw_Rc663_Exchange &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_RequestB
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_card
</UL>

<P><STRONG><a name="[1ff]"></a>phpalI14443p3b_Sw_CheckATQBEx</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, phpali14443p3b_sw.o(i.phpalI14443p3b_Sw_CheckATQBEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = phpalI14443p3b_Sw_CheckATQBEx
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_RequestBEx
</UL>

<P><STRONG><a name="[1c9]"></a>phpalI14443p3b_Sw_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, phpali14443p3b_sw.o(i.phpalI14443p3b_Sw_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc9883_init
</UL>

<P><STRONG><a name="[1fe]"></a>phpalI14443p3b_Sw_RequestB</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, phpali14443p3b_sw.o(i.phpalI14443p3b_Sw_RequestB))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = phpalI14443p3b_Sw_RequestB &rArr; phpalI14443p3b_Sw_RequestBEx &rArr; phhalHw_Exchange &rArr; phhalHw_Rc663_Exchange &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_RequestBEx
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_RequestB
</UL>

<P><STRONG><a name="[200]"></a>phpalI14443p3b_Sw_RequestBEx</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, phpali14443p3b_sw.o(i.phpalI14443p3b_Sw_RequestBEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = phpalI14443p3b_Sw_RequestBEx &rArr; phhalHw_Exchange &rArr; phhalHw_Rc663_Exchange &rArr; phhalHw_Rc663_SetConfig &rArr; phhalHw_Rc663_SetCardMode &rArr; phhalHw_Rc663_Cmd_LoadReg &rArr; phhalHw_Rc663_Command_Int &rArr; phhalHw_Rc663_WriteFifo &rArr; phhalHw_Rc663_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc663_WriteRegister &rArr; phbalReg_Exchange &rArr; phbalReg_Stub_Exchange &rArr; RegCtl_SpiHwGetReg &rArr; _SSP0_GetReg &rArr; SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_CheckATQBEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_RequestB
</UL>

<P><STRONG><a name="[1ca]"></a>phpalI14443p4_Sw_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, phpali14443p4_sw.o(i.phpalI14443p4_Sw_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc9883_init
</UL>

<P><STRONG><a name="[23b]"></a>phpalI14443p4_Sw_ResetProtocol</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, phpali14443p4_sw.o(i.phpalI14443p4_Sw_ResetProtocol), UNUSED)

<P><STRONG><a name="[1cb]"></a>phpalMifare_Sw_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, phpalmifare_sw.o(i.phpalMifare_Sw_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc9883_init
</UL>

<P><STRONG><a name="[11b]"></a>send_bytes</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, 74hc595.o(i.send_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = send_bytes &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu_sub
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_mode_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_reset
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_add
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_add
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_password_menu
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_menu_sub
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_hak_menu_sub
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_fp_menu
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_card_menu
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_keyboard_menu
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_hak_menu_sub
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_factory_menu
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_date_menu
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan_countdown
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_resource_used_log
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_operator_log
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_host_about_log
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_battery_used_log
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_menu
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_menu
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_menu
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_set
</UL>

<P><STRONG><a name="[7c]"></a>set_win6170</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, win6170.o(i.set_win6170))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_win6170 &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu_sub
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_mode_init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_reset
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;card_login
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_ScanTouchKey
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_smart_config
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_delete
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_add
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_save
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_delete
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_add
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_password_menu
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_fp_menu
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_card_menu
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_keyboard_menu
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_hak_menu_sub
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_date_menu
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan_countdown
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_operator_log
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_confirm
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_lock
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_repeat
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_set
</UL>

<P><STRONG><a name="[1be]"></a>sleep_mode</STRONG> (Thumb, 442 bytes, Stack size 48 bytes, menu.o(i.sleep_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8848<LI>Call Chain = sleep_mode &rArr; wifi_upload_all_info &rArr; wifi_server_time_syn &rArr; wifi_parase_time &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_Set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_all_info
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_sleep
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_off
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_WORK_125HZ_VAL
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_powerOff
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnterSTOP2Mode
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;horn_powerOff
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_powerOff
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_exit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Screen
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19b]"></a>stm_flash_erase</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, stmflash.o(i.stm_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = stm_flash_erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPage
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_reset
</UL>

<P><STRONG><a name="[136]"></a>stm_flash_erase_write</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, stmflash.o(i.stm_flash_erase_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = stm_flash_erase_write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPage
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_all_info
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_alarm_info
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_reset
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;card_login
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_delete
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_add
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_save
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_del
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_delete
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_add
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan_countdown
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_status_upload
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_tryErr_info
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_log_record
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_confirm
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_set
</UL>

<P><STRONG><a name="[131]"></a>stm_flash_read</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stmflash.o(i.stm_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm_flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_all_info
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_alarm_info
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;card_login
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_user_info
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_delete
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_add
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_save
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_del
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_delete
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_add
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_password_menu
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_fp_menu
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_card_menu
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_keyboard_menu
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan_countdown
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_resource_used_log
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_operator_log
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_status_upload
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_tryErr_info
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_confirm
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_config_wlan
</UL>

<P><STRONG><a name="[134]"></a>sys_battery_get</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, menu.o(i.sys_battery_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sys_battery_get &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetState
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;card_login
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_confirm
</UL>

<P><STRONG><a name="[208]"></a>sys_battery_used_log</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, user_operator.o(i.sys_battery_used_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sys_battery_used_log &rArr; APT_KeyEnableSel &rArr; APT_WriteChipReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_battery_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_menu
</UL>

<P><STRONG><a name="[76]"></a>sys_delay_us</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, delay.o(i.sys_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_all_info
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu_sub
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_power_on
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_reset
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;card_login
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UNLOCK
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOCK
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_ScanTouchKey
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_send
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_recv_parse
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_recv_data
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_power_off
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_smart_config
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_search_item
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_delete
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_add
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_save
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_delete
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_add
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_password_menu
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_menu_sub
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_hak_menu_sub
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_fp_menu
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_card_menu
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_keyboard_menu
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_hak_menu_sub
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_factory_menu
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_date_menu
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan_countdown
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_resource_used_log
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_operator_log
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_host_about_log
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_battery_used_log
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_menu
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_menu
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_menu
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_confirm
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_battery_get
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_lock
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_ChipRegSet
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_RC663_device
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_repeat
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_set
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_operate_sucessful
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IC
</UL>

<P><STRONG><a name="[209]"></a>sys_host_about_log</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, user_operator.o(i.sys_host_about_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = sys_host_about_log &rArr; display_sys_host_info &rArr; wifi_get_mac &rArr; wifi_trans_recev_command &rArr; usart3_recv_parse &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_host_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_menu
</UL>

<P><STRONG><a name="[1c3]"></a>sys_info_menu</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, user_operator.o(i.sys_info_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sys_info_menu &rArr; sys_operator_log &rArr; APT_KeyEnableSel &rArr; APT_WriteChipReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_resource_used_log
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_operator_log
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_host_about_log
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_battery_used_log
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_repeat
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_info_menu
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu
</UL>

<P><STRONG><a name="[133]"></a>sys_log_record</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, user_operator.o(i.sys_log_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sys_log_record &rArr; stm_flash_erase_write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;card_login
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_delete
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_add
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_save
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_del
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_delete
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_add
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_confirm
</UL>

<P><STRONG><a name="[20a]"></a>sys_operator_log</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, user_operator.o(i.sys_operator_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = sys_operator_log &rArr; APT_KeyEnableSel &rArr; APT_WriteChipReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_log_null
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_log_menu
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Screen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_menu
</UL>

<P><STRONG><a name="[20b]"></a>sys_resource_used_log</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, user_operator.o(i.sys_resource_used_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sys_resource_used_log &rArr; APT_KeyEnableSel &rArr; APT_WriteChipReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_source_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_menu
</UL>

<P><STRONG><a name="[20c]"></a>sys_set_config_wlan</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, user_operator.o(i.sys_set_config_wlan))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = sys_set_config_wlan &rArr; sys_set_config_wlan_countdown &rArr; APT_KeyEnableSel &rArr; APT_WriteChipReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan_countdown
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_status_upload
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_repeat
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_config_wlan
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_menu
</UL>

<P><STRONG><a name="[20d]"></a>sys_set_config_wlan_countdown</STRONG> (Thumb, 314 bytes, Stack size 376 bytes, user_operator.o(i.sys_set_config_wlan_countdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = sys_set_config_wlan_countdown &rArr; APT_KeyEnableSel &rArr; APT_WriteChipReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_trans_recev_command
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_smart_config
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_parase_time
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_search_item
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_mac
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_config_sucessful
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_config_fail
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan
</UL>

<P><STRONG><a name="[213]"></a>sys_set_date_menu</STRONG> (Thumb, 1574 bytes, Stack size 40 bytes, user_operator.o(i.sys_set_date_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = sys_set_date_menu &rArr; APT_KeyEnableSel &rArr; APT_WriteChipReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram_with_multi_arg
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_sucess
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_update
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_menu
</UL>

<P><STRONG><a name="[214]"></a>sys_set_factory_menu</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, user_operator.o(i.sys_set_factory_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = sys_set_factory_menu &rArr; factory_reset &rArr; fp_sleep &rArr; fp_tarns_recv_command &rArr; fp_pakge_recv_parse &rArr; usart2_recv_data &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_reset
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_repeat
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_whether_factory
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_menu
</UL>

<P><STRONG><a name="[1c2]"></a>sys_set_menu</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, user_operator.o(i.sys_set_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = sys_set_menu &rArr; sys_set_config_wlan &rArr; sys_set_config_wlan_countdown &rArr; APT_KeyEnableSel &rArr; APT_WriteChipReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_factory_menu
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_date_menu
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_repeat
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_set
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_submenu_sys
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu
</UL>

<P><STRONG><a name="[1aa]"></a>usart2_recv_data</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, fpcst90x.o(i.usart2_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usart2_recv_data &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_pakge_recv_parse
</UL>

<P><STRONG><a name="[216]"></a>usart3_recv_parse</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, wifi_8266.o(i.usart3_recv_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usart3_recv_parse &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_trans_recev_command
</UL>

<P><STRONG><a name="[211]"></a>usart3_search_item</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, wifi_8266.o(i.usart3_search_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usart3_search_item &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan_countdown
</UL>

<P><STRONG><a name="[218]"></a>user_add_hak_menu_sub</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, user_operator.o(i.user_add_hak_menu_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = user_add_hak_menu_sub &rArr; fp_add &rArr; fp_led_red &rArr; fp_tarns_recv_command &rArr; fp_pakge_recv_parse &rArr; usart2_recv_data &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_add
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_keyboard_menu
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_led_white
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_led_shutdown
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_repeat
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_subsubmenu_add
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_full
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_fail
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu
</UL>

<P><STRONG><a name="[219]"></a>user_add_keyboard_menu</STRONG> (Thumb, 464 bytes, Stack size 96 bytes, user_operator.o(i.user_add_keyboard_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = user_add_keyboard_menu &rArr; keyboard_password_save &rArr; display_check_sucessful &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_save
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_password_full
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_warn_again
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_warn
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_exit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_operate_fail
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_del
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu_sub
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_hak_menu_sub
</UL>

<P><STRONG><a name="[1c0]"></a>user_add_menu</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, user_operator.o(i.user_add_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = user_add_menu &rArr; user_add_menu_sub &rArr; fp_add &rArr; fp_led_red &rArr; fp_tarns_recv_command &rArr; fp_pakge_recv_parse &rArr; usart2_recv_data &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu_sub
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_hak_menu_sub
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_repeat
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_submenu_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu
</UL>

<P><STRONG><a name="[1bc]"></a>user_add_menu_sub</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, user_operator.o(i.user_add_menu_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = user_add_menu_sub &rArr; fp_add &rArr; fp_led_red &rArr; fp_tarns_recv_command &rArr; fp_pakge_recv_parse &rArr; usart2_recv_data &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_add
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_add
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_keyboard_menu
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_led_white
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_led_shutdown
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_repeat
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_subsubmenu_add
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_operate_fail
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_full
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_fail
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_exit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_card_full
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_card_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu
</UL>

<P><STRONG><a name="[21a]"></a>user_delete_card_menu</STRONG> (Thumb, 1578 bytes, Stack size 168 bytes, user_operator.o(i.user_delete_card_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = user_delete_card_menu &rArr; nfc_delete &rArr; sys_log_record &rArr; stm_flash_erase_write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_delete
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_card_const
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_card
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_del_failed
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_card_null
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Screen
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_menu_sub
</UL>

<P><STRONG><a name="[21b]"></a>user_delete_fp_menu</STRONG> (Thumb, 986 bytes, Stack size 208 bytes, user_operator.o(i.user_delete_fp_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = user_delete_fp_menu &rArr; fp_delete &rArr; fp_power_on &rArr; MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_delete
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_finger_const
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_finger
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_null
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_finger_del_fail
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Screen
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_menu_sub
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_hak_menu_sub
</UL>

<P><STRONG><a name="[21c]"></a>user_delete_hak_menu_sub</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, user_operator.o(i.user_delete_hak_menu_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = user_delete_hak_menu_sub &rArr; user_delete_fp_menu &rArr; fp_delete &rArr; fp_power_on &rArr; MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_password_menu
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_fp_menu
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_repeat
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_submenu_del
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_menu
</UL>

<P><STRONG><a name="[1c1]"></a>user_delete_menu</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, user_operator.o(i.user_delete_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = user_delete_menu &rArr; user_delete_menu_sub &rArr; user_delete_fp_menu &rArr; fp_delete &rArr; fp_power_on &rArr; MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_menu_sub
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_hak_menu_sub
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_repeat
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_submenu_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu
</UL>

<P><STRONG><a name="[21e]"></a>user_delete_menu_sub</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, user_operator.o(i.user_delete_menu_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = user_delete_menu_sub &rArr; user_delete_fp_menu &rArr; fp_delete &rArr; fp_power_on &rArr; MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_password_menu
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_fp_menu
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_card_menu
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_repeat
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_submenu_del
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_menu
</UL>

<P><STRONG><a name="[21d]"></a>user_delete_password_menu</STRONG> (Thumb, 1514 bytes, Stack size 168 bytes, user_operator.o(i.user_delete_password_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = user_delete_password_menu &rArr; keyboard_password_del &rArr; sys_log_record &rArr; stm_flash_erase_write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_del
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_passwod_null
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_password_const
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_password
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_del_sucessful
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_del_failed
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Screen
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_menu_sub
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_hak_menu_sub
</UL>

<P><STRONG><a name="[1bf]"></a>voice_repeat</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, menu.o(i.voice_repeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = voice_repeat &rArr; set_win6170 &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu_sub
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_menu_sub
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_hak_menu_sub
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_hak_menu_sub
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_factory_menu
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delete_menu
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_add_menu
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_menu
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_info_menu
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vol_set
</UL>

<P><STRONG><a name="[215]"></a>vol_set</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, win6170.o(i.vol_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = vol_set &rArr; APT_KeyEnableSel &rArr; APT_WriteChipReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APT_KeyEnableSel
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_repeat
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_subsubmenu_sys
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set_sucess
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_menu
</UL>

<P><STRONG><a name="[18e]"></a>wifi_get_mac</STRONG> (Thumb, 42 bytes, Stack size 80 bytes, wifi_8266.o(i.wifi_get_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wifi_get_mac &rArr; wifi_trans_recev_command &rArr; usart3_recv_parse &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_point_parse
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_trans_recev_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_all_info
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan_countdown
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_host_info
</UL>

<P><STRONG><a name="[21f]"></a>wifi_get_password</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wifi_8266.o(i.wifi_get_password))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wifi_get_password &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
</UL>

<P><STRONG><a name="[1c5]"></a>wifi_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wifi_8266.o(i.wifi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wifi_init &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_mode_init
</UL>

<P><STRONG><a name="[212]"></a>wifi_parase_time</STRONG> (Thumb, 532 bytes, Stack size 88 bytes, wifi_8266.o(i.wifi_parase_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wifi_parase_time &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_server_time_syn
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan_countdown
</UL>

<P><STRONG><a name="[201]"></a>wifi_power_off</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wifi_8266.o(i.wifi_power_off))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
</UL>

<P><STRONG><a name="[a0]"></a>wifi_power_on</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wifi_8266.o(i.wifi_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wifi_power_on &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;card_login
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_smart_config
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_delete
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_add
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_save
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_del
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_delete
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_add
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_tryErr_info
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_confirm
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test
</UL>

<P><STRONG><a name="[1b6]"></a>wifi_remote_open</STRONG> (Thumb, 1994 bytes, Stack size 304 bytes, wifi_8266.o(i.wifi_remote_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = wifi_remote_open &rArr; wifi_get_mac &rArr; wifi_trans_recev_command &rArr; usart3_recv_parse &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_on
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_send
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_password
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_trans_recev_command
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_search_item
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_mac
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_wifi_wait
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_unlock_wlan_countdown
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_spe_char_del
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_operate_fail
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_iphone_result
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_iphone_offline
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_iphone_number
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_iphone_num
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_iphone_nonexistent
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_iphone_appoint
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Screen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_confirm
</UL>

<P><STRONG><a name="[223]"></a>wifi_rxBuff_clear</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wifi_8266.o(i.wifi_rxBuff_clear))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_trans_recev_command
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_smart_config
</UL>

<P><STRONG><a name="[20f]"></a>wifi_smart_config</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, wifi_8266.o(i.wifi_smart_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wifi_smart_config &rArr; display_wifi_wait &rArr; oled_refresh_gram &rArr; Write_Data &rArr; HAL_I2C_Master_Transmit &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_on
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_rxBuff_clear
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_trans_recev_command
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_wifi_wait
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_sys_config_wlan_countdown
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Screen
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan_countdown
</UL>

<P><STRONG><a name="[210]"></a>wifi_trans_recev_command</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, wifi_8266.o(i.wifi_trans_recev_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wifi_trans_recev_command &rArr; usart3_recv_parse &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_rxBuff_clear
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_recv_parse
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_all_info
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_send
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_server_time_syn
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_smart_config
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan_countdown
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_mac
</UL>

<P><STRONG><a name="[a1]"></a>wifi_upload_alarm_info</STRONG> (Thumb, 140 bytes, Stack size 64 bytes, wifi_8266.o(i.wifi_upload_alarm_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wifi_upload_alarm_info &rArr; stm_flash_erase_write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[1bd]"></a>wifi_upload_all_info</STRONG> (Thumb, 646 bytes, Stack size 8296 bytes, wifi_8266.o(i.wifi_upload_all_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8800<LI>Call Chain = wifi_upload_all_info &rArr; wifi_server_time_syn &rArr; wifi_parase_time &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_user_info
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_send
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_server_time_syn
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_trans_recev_command
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[135]"></a>wifi_upload_battery</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, wifi_8266.o(i.wifi_upload_battery))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_login
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;card_login
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_password_confirm
</UL>

<P><STRONG><a name="[221]"></a>wifi_upload_send</STRONG> (Thumb, 364 bytes, Stack size 56 bytes, wifi_8266.o(i.wifi_upload_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = wifi_upload_send &rArr; wifi_trans_recev_command &rArr; usart3_recv_parse &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_trans_recev_command
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_all_info
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_remote_open
</UL>

<P><STRONG><a name="[1b3]"></a>wifi_upload_tryErr_info</STRONG> (Thumb, 160 bytes, Stack size 72 bytes, wifi_8266.o(i.wifi_upload_tryErr_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wifi_upload_tryErr_info &rArr; stm_flash_erase_write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_on
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_lock
</UL>

<P><STRONG><a name="[224]"></a>wifi_upload_user_info</STRONG> (Thumb, 374 bytes, Stack size 64 bytes, wifi_8266.o(i.wifi_upload_user_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = wifi_upload_user_info &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_all_info
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8a]"></a>LL_ADC_GetOffsetChannel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_GetOffsetChannel))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[6f]"></a>LL_ADC_INJ_IsConversionOngoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_INJ_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>

<P><STRONG><a name="[6e]"></a>LL_ADC_REG_IsConversionOngoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_REG_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>

<P><STRONG><a name="[90]"></a>LL_ADC_REG_IsTriggerSourceSWStart</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_REG_IsTriggerSourceSWStart))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
</UL>

<P><STRONG><a name="[89]"></a>LL_ADC_SetChannelSamplingTime</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_SetChannelSamplingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[8b]"></a>LL_ADC_SetOffsetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_SetOffsetState))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[f4]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[f3]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32l4xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[ab]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[ac]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[a8]"></a>I2C_TransferConfig</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, stm32l4xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[a7]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[aa]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[a9]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[cc]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[110]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, stm32l4xx_hal_spi.o(i.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[111]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[d6]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[d4]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[d5]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[4d]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[e6]"></a>UART_EndRxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[4f]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RxISR_16BIT
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
</UL>
<P><STRONG><a name="[4e]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RxISR_8BIT
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
</UL>
<P><STRONG><a name="[bc]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[b8]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[98]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l4xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[99]"></a>FLASH_Program_Fast</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l4xx_hal_flash.o(i.FLASH_Program_Fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_Fast
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[94]"></a>FLASH_MassErase</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[b6]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[154]"></a>pow_tool</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssd1305.o(i.pow_tool))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_factory_hjs_number
</UL>

<P><STRONG><a name="[204]"></a>GetPage</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stmflash.o(i.GetPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetPage
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase
</UL>

<P><STRONG><a name="[115]"></a>UsartConfig_STOP</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, menu.o(i.UsartConfig_STOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UsartConfig_STOP &rArr; MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
</UL>

<P><STRONG><a name="[19e]"></a>factory_test</STRONG> (Thumb, 916 bytes, Stack size 488 bytes, menu.o(i.factory_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = factory_test &rArr; fp_sleep &rArr; fp_tarns_recv_command &rArr; fp_pakge_recv_parse &rArr; usart2_recv_data &rArr; sys_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_on
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_delay_us
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_win6170
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bytes
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_sleep
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fp_tarns_recv_command
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_mac
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_refresh_gram
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_wifi_factory_sucess
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_wifi_factory_fail
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_spe_char_factory
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_operate_sucessful
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_number_all
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_factory_sel
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_login
</UL>

<P><STRONG><a name="[13c]"></a>cloud_status_upload</STRONG> (Thumb, 142 bytes, Stack size 72 bytes, user_operator.o(i.cloud_status_upload))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cloud_status_upload &rArr; stm_flash_erase_write &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_read
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_flash_erase_write
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_set_config_wlan
</UL>

<P><STRONG><a name="[222]"></a>wifi_server_time_syn</STRONG> (Thumb, 144 bytes, Stack size 368 bytes, wifi_8266.o(i.wifi_server_time_syn))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = wifi_server_time_syn &rArr; wifi_parase_time &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_trans_recev_command
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_parase_time
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_upload_all_info
</UL>

<P><STRONG><a name="[10f]"></a>SPIWriteByte</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, regctl_spihw.o(i.SPIWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPIWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SSP0_SetReg
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SSP0_GetReg
</UL>

<P><STRONG><a name="[12c]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[12f]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[12e]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[51]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
